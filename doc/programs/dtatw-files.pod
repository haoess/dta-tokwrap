=pod

=head1 NAME

dtatw-files.perl - file formats used by dta-tokwrap utilities

=head1 SYNOPSIS

 FILENAME    (STATUS)   DESCRIPTION

 *.xml       (input)    input XML file in DTA "base-format"
 *.chr.xml   (input)	common convention for input files
 *.char.xml  (input)	another common convention for input files
 
 *.cx        (temp)	character index (CSV,TAB-separated)
 *.sx        (temp)	structure index (XML)
 *.tx        (temp)	text index (UTF-8 text)
 *.bx0       (temp)	preliminary "block index" (XML)
 *.bx        (temp)	block index (CSV,TAB-separated)
 *.txt       (temp)	serialized text (UTF-8 text)
 *.t         (temp)	tokenizer output (.tt, TAB-separated)
 
 *.t.xml     (output)	master XML output (XML)
 *.s.xml     (output)	sentence-level standoff (XML)
 *.w.xml     (output)	token-level standoff (XML)
 *.a.xml     (output)	token-analysis-level standoff (XML)


=cut

##======================================================================
=pod

=head1 DESCRIPTION

This manual describes the file formats currently used by the
dta-tokwrap utilities.

=cut

##--------------------------------------------------------------
=pod

=head2 Input File Formats


=head3 *.xml

B<Alias(es)>: *.chr.xml, *.char.xml

Input XML file in DTA "base-format" (UTF8-encoded XML with one C<c>
element per character):

=over 4

=item *

input documents B<MUST> be encoded in UTF-8,

=item *

all text nodes to be tokenized should be descendants of a C<E<lt>cE<gt>> element
which is itself a descendant of a C<E<lt>textE<gt>> element (XPath C<//text//c//text()>),

=item *

each input document should contain exactly one such C<E<lt>cE<gt>> element for
I<each logical character>
which may be passed to the tokenizer,

=item *

no C<E<lt>cE<gt>> element may be a descendant of another C<E<lt>cE<gt>> element,
and

=item *

each C<c> element should have a valid C<xml:id> attribute.

=back

Example:

 <?xml version="1.0" encoding="UTF-8"?>
 <text>
  <!-- ... -->
  <c xml:id="c1"> </c>
  <c xml:id="c2">U</c>
  <c xml:id="c3">e</c>
  <c xml:id="c4">b</c>
  <c xml:id="c5">e</c>
  <c xml:id="c6">r</c>
  <c xml:id="c7"> </c>
  <c xml:id="c8">d</c>
  <c xml:id="c9">i</c>
  <c xml:id="c10">e</c>
  <c xml:id="c11"> </c>
  <!-- ... -->
 </text>

=cut


##--------------------------------------------------------------
=pod

=head2 Temporary File Formats

=head3 *.cx

Character index file (TAB-separated text)
as created by
F<dtatw-mkindex>.
Used for
translating between byte offsets and C<xml:id>s.

Example:

 %% <c>-element index generated by ../src/dtatw-mkindex
 %% Package: dta-tokwrap version 0.04 / svn+ssh://odo.dwds.de/home/svn/dev/dta-tokwrap/trunk @ 2445:2447
 %% Command-line: ../src/dtatw-mkindex 'xmlsrc/ex1.xml' 'ex1.cx' 'ex1.sx' 'ex1.tx'
 %%======================================================================
 %% $ID$	$XML_OFFSET$	$XML_LENGTH$	$TXT_OFFSET$	$TXT_LEN$	$TEXT$
 c1	276	20	0	1	 
 c2	382	20	1	1	U
 c3	402	20	2	1	e
 c4	422	20	3	1	b
 c5	442	20	4	1	e
 c6	462	20	5	1	r
 c7	482	20	6	1	 
 c8	502	20	7	1	d
 c9	522	20	8	1	i
 c10	542	21	9	1	e
 c11	563	21	10	1	 


=head3 *.sx

Structure index (XML)
as created by F<dtatw-mkindex>.
All XPaths C<//text//c|//text//lb> have been removed and replaced
by placeholder C<c> elements for each contiguous I<block> of original C<c> and C<lb>
elements.  The placeholder elements have the form:

 <c n="XOFF XLEN TOFF TLEN"/>

where XOFF,XLEN are byte-offset and -length in the source XML file (*.xml)
and TOFF,TLEN are byte-offset and -length in the raw text index file (*.tx).

 <?xml version="1.0" encoding="UTF-8"?>
 <text>
   <!-- ... -->
      <titlePage>
        <c n="338 11 1 0"/>
        <docTitle>
          <c n="349 10 1 0"/>
          <titlePart type="main">
            <c n="359 23 1 0"/>
            <c n="382 1666 1 82"/>
          </titlePart>
          <c n="2048 12 83 0"/>
          <c n="2060 5 83 1"/>
        <!-- ... -->
      </titlePage>
   <!-- ... -->
 </text>

=head3 *.tx

Raw, unserialized text index (UTF-8 text)
as created by F<dtatw-mkindex>.
Results from concatenating all C<//text//c//text()> nodes from
the source document, and inserting newlines for C<//text//lb> elements.

Example:

  Ueber die Beeinflussung
 einfacher psychischer Vorg채nge
 durch einige Arzneimittel.
 Experimentelle Untersuchungen
 von
 Dr. Emil Kraepelin,
 Professor der Psychiatrie in Heidelberg.
 Mit einer Curventafel.
 Jena,
 Verlag von Gustav Fischer.
 1892.


=head3 *.bx0

Preliminary "block index" (XML)
as created by L<"dta-tokwrap.perl -t mkbx0"|dta-tokwrap.perl>.
Generated from the *.sx file by inserting zero or more "hints"
of one of the following forms:

 <s/>    <!-- sentence-break hint -->
 <w/>    <!-- token-break hint    -->
 <lb/>   <!-- line-break hint     -->

Zero or more output elements may also be assigned a C<dta.tw.key>
attribute, which should be some unique key identifying the
logical block or I<segment> with which any text descended from
that element should be sorted during serialization (this is how we
get C<seg> elements to clump together).
C<dta.tw.key> attributes are inherited by default.

Example:

 <?xml version="1.0" encoding="UTF-8"?>
 <text>
   <!-- ... -->
      <titlePage>
        <s/>
        <c n="338 11 1 0"/>
        <docTitle>
          <c n="349 10 1 0"/>
          <titlePart type="main">
            <s/>
            <c n="359 23 1 0"/>
            <c n="382 1666 1 82"/>
            <s/>
          </titlePart>
          <c n="2048 12 83 0"/>
          <c n="2060 5 83 1"/>
        </s>
      </titlePage>
   <!-- ... -->
 </text>


=head3 *.bx

Block index (TAB-separated text)
as created by L<"dta-tokwrap.perl -t mkbx"|dta-tokwrap.perl>.
Used for
translating between serialized-text (.txt) byte offsets and
raw-text (.tx) byte offsets, which in turn gets us to C<c/@xml:id>s.
Still with me?  Good.

Example:

 %% XML block list file generated by DTA::TokWrap::Document::saveBxFile() (DTA::TokWrap version 0.04)
 %% Original source file: ./xmlsrc/ex1.xml
 %%======================================================================
 %% $KEY$	$ELT$	$XML_OFFSET$	$XML_LENGTH$	$TX_OFFSET$	$TX_LEN$	$TXT_OFFSET$	$TXT_LEN$
 __ROOT__	__ROOT__	0	0	0	0	0	0
 TEI.id2406247	s	176	0	0	0	0	6
 TEI.id2406247	s	176	0	0	0	6	6
 TEI.id2406247	s	215	0	0	0	12	6
 TEI.id2406247	s	227	0	0	0	18	6
 TEI.id2406247	s	258	0	0	0	24	6
 TEI.id2406247	c	270	26	0	1	30	1
 TEI.id2406247	s	270	0	0	0	31	6

=head3 *.txt

Serialized text (UTF-8 text)
as created by L<"dta-tokwrap.perl -t mkbx"|dta-tokwrap.perl>,
possibly containing tokenizer "hints",
to be passed to the underlying tokenizer.

Example:

 $SB$
 Ueber die Beeinflussung
 einfacher psychischer Vorg채nge
 durch einige Arzneimittel.
 $SB$
 
 $SB$
 Experimentelle Untersuchungen
 $SB$

=head3 *.t

Tokenizer output (.tt, TAB-separated UTF-8 text).
The first non-text field should contain "TXTOFF TXTLEN" pairs,
where TXTOFF and TXTLEN are byte-offset and -length in the *.txt
file.  These data are required for recovery of C<c> element IDs.
See F<mootfiles(5)> for details on the file format.

Example:

 %% raw tokenizer output generated by ../src/dtatw-tokenize-dummy (dta-tokwrap version 0.04)
 Ueber	49 5
 die	55 3
 Beeinflussung	59 13
 einfacher	73 9
 psychischer	83 11
 Vorg채nge	95 9
 durch	105 5
 einige	111 6
 Arzneimittel	118 12
 .	130 1	$.


=cut

##--------------------------------------------------------------
=pod

=head2 Output File Formats

=head3 *.t.xml

Master XML-ified tokenizer output (XML).
X-Paths:

 /*/s      : sentence: <s xml:id=ID>...</s>
 /*/s/w    : token: <w @xml:id @b="TXTOFF TXTLEN" t="TEXT" c="C_IDS">...</w>
 /*/s/w/a  : token analysis: <a>ANALYSIS_TEXT</a>

Example:

 <?xml version="1.0" encoding="UTF-8"?>
 <sentences xml:base="ex1.xml">
  <s xml:id="s1">
    <w xml:id="w1" b="49 5" t="Ueber" c="c2 c3 c4 c5 c6"/>
    <w xml:id="w2" b="55 3" t="die" c="c8 c9 c10"/>
    <w xml:id="w3" b="59 13" t="Beeinflussung" c="c12 c13 c14 c15 c16 c17 c18 c19 c20 c21 c22 c23 c24"/>
    <w xml:id="w4" b="73 9" t="einfacher" c="c25 c26 c27 c28 c29 c30 c31 c32 c33"/>
    <w xml:id="w5" b="83 11" t="psychischer" c="c35 c36 c37 c38 c39 c40 c41 c42 c43 c44 c45"/>
    <w xml:id="w6" b="95 9" t="Vorg채nge" c="c47 c48 c49 c50 c51 c52 c53 c54"/>
    <w xml:id="w7" b="105 5" t="durch" c="c55 c56 c57 c58 c59"/>
    <w xml:id="w8" b="111 6" t="einige" c="c61 c62 c63 c64 c65 c66"/>
    <w xml:id="w9" b="118 12" t="Arzneimittel" c="c68 c69 c70 c71 c72 c73 c74 c75 c76 c77 c78 c79"/>
    <w xml:id="w10" b="130 1" t="." c="c80">
      <a>$.</a>
    </w>
  </s>
 <!-- ... -->
 </sentences>


=head3 *.s.xml

Sentence-level standoff XML.

Example:

 <?xml version="1.0" encoding="UTF-8"?>
 <sentences xml:base="ex1.w.xml">
  <s xml:id="s1">
    <w ref="#w1"/>
    <w ref="#w2"/>
    <w ref="#w3"/>
    <w ref="#w4"/>
    <w ref="#w5"/>
    <w ref="#w6"/>
    <w ref="#w7"/>
    <w ref="#w8"/>
    <w ref="#w9"/>
    <w ref="#w10"/>
  </s>
  <!-- ... -->
 </sentences>

=head3 *.w.xml

Token-level standoff XML.

Example:

 <?xml version="1.0" encoding="UTF-8"?>
 <tokens xml:base="ex1.xml">
  <w xml:id="w1" t="Ueber">
    <c ref="#c2"/>
    <c ref="#c3"/>
    <c ref="#c4"/>
    <c ref="#c5"/>
    <c ref="#c6"/>
  </w>
  <w xml:id="w2" t="die">
    <c ref="#c8"/>
    <c ref="#c9"/>
    <c ref="#c10"/>
  </w>
  <w xml:id="w3" t="Beeinflussung">
    <c ref="#c12"/>
    <c ref="#c13"/>
    <c ref="#c14"/>
    <c ref="#c15"/>
    <c ref="#c16"/>
    <c ref="#c17"/>
    <c ref="#c18"/>
    <c ref="#c19"/>
    <c ref="#c20"/>
    <c ref="#c21"/>
    <c ref="#c22"/>
    <c ref="#c23"/>
    <c ref="#c24"/>
  </w>
  <!-- ... -->
 </tokens>

=head3 *.a.xml

Token-analysis-level standoff XML.
Currently contains only analyses supplied by the tokenizer.

Example:

 <?xml version="1.0" encoding="UTF-8"?>
 <analyses xml:base="ex1.w.xml">
  <a ref="#w10">$.</a>
  <a ref="#w14">$ABBR</a>
  <a ref="#w17">$,</a>
  <a ref="#w23">$.</a>
  <a ref="#w27">$.</a>
  <a ref="#w29">$,</a>
  <a ref="#w34">$.</a>
  <a ref="#w35">$CARDPUNCT</a>
  <!-- ... -->
 </analyses>

=cut

##======================================================================
=pod

=head1 SEE ALSO

L<dtatw-add-c.perl(1)|dtatw-add-c.perl>,
L<dta-tokwrap.perl(1)|dta-tokwrap.perl>,
L<DTA::TokWrap::Intro(3pm)|DTA::TokWrap::Intro>,
...

=head1 AUTHOR

Bryan Jurish E<lt>jurish@bbaw.deE<gt>

