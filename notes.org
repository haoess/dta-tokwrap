#*- Mode: Org; coding: utf-8;: -*-
#
#+STARTUP: showall
#+STARTUP: logdone
#-STARTUP: hideblocks

* Old structure
 - dta-tokwrap (autoconf)
   - src (autoconf+C)
   - DTA-TokWrap (perl)
   - scripts (autoconf+data)
   - doc (autoconf + automake + scripts)
   - make (data)
   - examples (data)

* Desiderata
 - CPAN-friendly top-level
   - either build & install C from CPAN distro, or use additional Alien package
 - dstar-deps friendly
 - one-stop-shopping (dstar-deps friendly)

* Idea #0: weiter wis bisher

 - dta-tokwrap structure as before

** Idea #0a: dummy Makefile.PL
 - add a Makefile.PL in the root directory which just calls ./configure
   - Makefile is generated by autoconf
   - simulate Makefile.PL targets used by perl (cpan smokers) via autoconf/automake
 - good:
   - very easy to implement
   - should pass through cpan smokers and cpanm
 - bad:
   - META.yml, MANIFEST, etc. have to be created and maintained by hand

** Idea #0b: parallel Makefile.PL
 - add a Makefile.PL in the root directory which calls ./configure *AND* WriteMakefile()
   - does WriteMakefile() allow us to write to a file other then "Makefile"?
   - otherwise we could do WriteMakefile() && rename("Makefile", "pMakefile")

 - TRY: Makefile.PL: configure->Makefile.auto, WriteMakefile()->Makefile
   - make -f Makefile.auto 
 
* Idea #1: binary split
 - dta-tokwrap (via Makefile.PL?)
   - DTA-TokWrap (perl)
   - dta-tokwrap-utils (autoconf+C)
   - scripts
   - doc (autoconf)
   - make
   - examples

** issues
 - [ ] autoconf stuff in configure.ac would need to be ported to Makefile.PL
   - [ ] svnversion and Version.pm generation (maybe gank from CAB)
   - [ ] auxiliary install directories for (stylesheets, make, doc)
   - [ ] doc generation links & rules
     - this stuff *could* be ported to Makefile.PL, but that seems like overkill
     - CPAN-based installations don't really *need* the docs
 - [ ] embedded options: how do we get embedded options to utils/configure from top Makefile.PL?
   - ARGV ?
   - ENV ?
 - [ ] embedded defaults: how do we pass down default options to utils/configure from top Makefile.PL?
   - or do we bother doing that at all?

* Idea #1: ternary split

 - dta-tokwrap (via Makefile.PL?)
   - DTA-TokWrap (perl)
   - dta-tokwrap-utils (autoconf+C)
   - dta-tokwrap-aux (data only: Makefile.PL or autoconf)
     - scripts
     - make
     - examples
   - dta-tokwrap-doc (autoconf+...)
     - doc


* TODOs

** TODO update utils/README

** TODO perlmonks
<p>honored monks,</p>
<p>
<b>The Situation</b><br/>
I am in the process of cleaning up a 10-year-old package involving both perl and C for distribution on CPAN (because it's a stealth dependency of yet another package), and hopefully also basic testing via cpantesters.  The package in question uses GNU autoconf+automake for the top-level configuration+build framework, and the embedded pure-perl portion uses <tt>ExtUtils::MakeMaker</tt> in a subdirectory (which I've already tricked the top-level autoconf+automake into handling mostly correctly most of the time).
</p>
<p>
<b>What I've Tried</b><br/>
I've written a dummy <tt>Makefile.PL</tt> in the root distribution root directory which just calls autoconf's <tt>./configure</tt> to generate the autoconf+automake <tt>Makefile</tt>, and added a "test" target for testing, but presumably I'll also need a META.(yml|json) for the top-level CPAN metadata.  I have <b>not</b> yet uploaded this module to CPAN.
</p>
<p>
<b>The Wisdom I Seek</b><br/>
Does anyone here have any experience wrapping "help-alien" packages like this into a CPAN-friendly distribution which will play nicely together with CPAN smokers etc.?  Are there any other hard conventions I should be aware of, or any other cunning and devious methods for embedding autotools packages in perl packages?  I'm aware of the Alien:: namespace, but I'd very much like to avoid splitting this particular package up if possible.
</p>
<p>
marmosets,<br/>
  Bryan / moocow
</p>
