## -*- Mode: CPerl -*-

## File: DTA::TokWrap::Processor::tei2tcf.pm
## Author: Bryan Jurish <jurish@bbaw.de>
## Description: DTA tokenizer wrappers: TEI->TCF encoding

package DTA::TokWrap::Processor::tei2tcf;

use DTA::TokWrap::Version;  ##-- imports $VERSION, $RCDIR
use DTA::TokWrap::Base;
use DTA::TokWrap::Utils qw(:progs :slurp :time :libxml :xmlutils);
use DTA::TokWrap::Processor;

use Encode qw(encode decode);
use Carp;
use strict;

##==============================================================================
## Constants
##==============================================================================
our @ISA = qw(DTA::TokWrap::Processor);

##==============================================================================
## Constructors etc.
##==============================================================================

## $mi = CLASS_OR_OBJ->new(%args)
##  + %args: (none)

## %defaults = CLASS_OR_OBJ->defaults()
##  + called by constructor
##  + inherited dummy method
#sub defaults { qw() }

## $enc = $enc->init()
##  + inherited dummy method
#sub init { $_[0] }

##==============================================================================
## Methods
##==============================================================================

## $doc_or_undef = $CLASS_OR_OBJECT->tei2tcf($doc)
## + $doc is a DTA::TokWrap::Document object
## + %$doc keys:
##    xmlfile => $xmlfile, ##-- (input) source TEI-XML file
##    txtfile => $txtfile, ##-- (input) serialized text file
##    xmldata => $xmldata, ##-- (input,alternate) source TXT-XML buffer; may be utf8::decode()d by this method
##    txtdata => $txtdata, ##-- (input,alternate) serialized text data; may be utf8::decode()d by this method
##    tcflang => $lang,    ##-- (input) tcf language (default="de")
##    ##
##    tcfdoc  => $tcfdoc,   ##-- (output) TCF output document
##    tei2tcf_stamp0 => $f, ##-- (output) timestamp of operation begin
##    tei2tcf_stamp  => $f, ##-- (output) timestamp of operation end
##    tcfdoc_stamp   => $f, ##-- (output) timestamp of operation end
sub tei2tcf {
  my ($enc,$doc) = @_;
  $enc = $enc->new if (!ref($enc));
  $doc->setLogContext();

  ##-- log, stamp
  $enc->vlog($enc->{traceLevel},"tei2tcf()");
  $doc->{tei2tcf_stamp0} = timestamp(); ##-- stamp

  ##-- create TCF document (lifted from DTA::CAB::Format::TCF::putDocument())
  my $xdoc = $doc->{tcfdoc} = XML::LibXML::Document->new("1.0","UTF-8");
  my $xroot = $xdoc->createElement('D-Spin');
  $xdoc->setDocumentElement($xroot);
  $xroot->setNamespace('http://www.dspin.de/data');
  $xroot->setAttribute('version'=>'0.4');

  ##-- document structure: metadata
  my $xmeta = $xroot->findnodes('*[local-name()="MetaData"]')->[0];
  $xmeta = $xroot->addNewChild(undef,'MetaData');
  $xmeta->setNamespace('http://www.dspin.de/data/metadata');
  $xmeta->appendTextChild('source', $doc->{source}) if (defined($doc->{source}));

  ##-- document structure: TextCorpus
  my $xcorpus = $xroot->findnodes('*[local-name()="TextCorpus"]')->[0];
  $xcorpus = $xroot->addNewChild(undef,'TextCorpus');
  $xcorpus->setNamespace('http://www.dspin.de/data/textcorpus');
  $xcorpus->setAttribute('lang'=>($doc->{tcflang}//'de'));

  ##-- document structure: TextCorpus/tei
  my $xtei = $xcorpus->findnodes('*[local-name()="tei"]')->[0];
  $xtei = $xcorpus->addNewChild(undef,'tei');
  #$xtei->setAttribute('type'=>'text/tei+xml');
  ##
  my $xmldata_is_tmp = !defined($doc->{xmldata});
  $enc->logconfess("tei2tcf(): could not load TEI-XML source file '$doc->{xmlfile}' and {xmldata} key undefined")
    if ($xmldata_is_tmp && !$doc->loadXmlData());
  #utf8::decode($doc->{xmldata}) if (!utf8::is_utf8($doc->{xmldata}));
  $xtei->appendText( $doc->{xmldata} );
  delete($doc->{xmldata}) if ($xmldata_is_tmp);

  ##-- document structure: TextCorpus/text
  my $xtxt = $xcorpus->findnodes('*[local-name()="text"]')->[0];
  $xtxt = $xcorpus->addNewChild(undef,'text');
  ##
  my $txtdata_is_tmp = !defined($doc->{txtdata});
  $enc->logconfess("tei2tcf(): could not load serialized text file '$doc->{txtfile}' and {txtdata} key undefined")
    if ($txtdata_is_tmp && !$doc->loadTxtData());
  #utf8::decode($doc->{txtdata}) if (!utf8::is_utf8($doc->{txtdata}));
  $xtxt->appendText( $doc->{txtdata} );
  ##
  delete($doc->{txtdata}) if ($txtdata_is_tmp);

  ##-- finalize
  $doc->{tei2tcf_stamp} = $doc->{tcfdoc_stamp} = timestamp(); ##-- stamp
  return $doc;
}

##==============================================================================
## Utilities
##==============================================================================

1; ##-- be happy

__END__

##========================================================================
## POD DOCUMENTATION, auto-generated by podextract.perl, edited

##========================================================================
## NAME
=pod

=head1 NAME

DTA::TokWrap::Processor::tei2tcf - DTA tokenizer wrappers: TEI-E<gt>TCF encoding

=cut

##========================================================================
## SYNOPSIS
=pod

=head1 SYNOPSIS

 use DTA::TokWrap::Processor::tei2tcf;
 
 $mi = DTA::TokWrap::Processor::tei2tcf->new(%opts);
 $doc_or_undef = $mi->tei2tcf($doc);

=cut

##========================================================================
## DESCRIPTION
=pod

=head1 DESCRIPTION

DTA::TokWrap::Processor::tei2tcf provides an object-oriented
L<DTA::TokWrap::Processor|DTA::TokWrap::Processor> wrapper
for encoding (serialized) TEI-XML as TCF ("Text Corpus Format",
cf. http://weblicht.sfs.uni-tuebingen.de/weblichtwiki/index.php/The_TCF_Format)
using L<DTA::TokWrap::Document|DTA::TokWrap::Document> objects.

=cut

##----------------------------------------------------------------
## DESCRIPTION: DTA::TokWrap::Processor::tei2tcf: Constants
=pod

=head2 Constants

=over 4

=item @ISA

DTA::TokWrap::Processor::tei2tcf
inherits from
L<DTA::TokWrap::Processor|DTA::TokWrap::Processor>.

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DTA::TokWrap::Processor::tei2tcf: Constructors etc.
=pod

=head2 Constructors etc.

=over 4

=item new

 $obj = $CLASS_OR_OBJECT->new(%args);

Constructor.

=item defaults

 %defaults = $CLASS->defaults();

Static class-dependent defaults.

=back

=cut

##----------------------------------------------------------------
## DESCRIPTION: DTA::TokWrap::Processor::tei2tcf: Methods
=pod

=head2 Methods

=over 4

=item tei2tcf

 $doc_or_undef = $CLASS_OR_OBJECT->tei2tcf($doc);

Converts the
L<DTA::TokWrap::Document|DTA::TokWrap::Document> object
to TCF, storing the result as an
XML::LibXML::Document in
C<$doc-E<gt>{tcfdoc}>.

Relevant %$doc keys:

 xmlfile => $xmlfile, ##-- (input) source TEI-XML file
 txtfile => $txtfile, ##-- (input) serialized text file
 xmldata => $xmldata, ##-- (input,alternate) source TXT-XML buffer
 txtdata => $txtdata, ##-- (input,alternate) serialized text data
 ##
 tcfdoc  => $tcfdoc,   ##-- (output) TCF output document
 tei2tcf_stamp0 => $f, ##-- (output) timestamp of operation begin
 tei2tcf_stamp  => $f, ##-- (output) timestamp of operation end
 tcfdoc_stamp   => $f, ##-- (output) timestamp of operation end

=back

=cut

##========================================================================
## END POD DOCUMENTATION, auto-generated by podextract.perl

##======================================================================
## See Also
##======================================================================

=pod

=head1 SEE ALSO

L<DTA::TokWrap::Intro(3pm)|DTA::TokWrap::Intro>,
L<dta-tokwrap.perl(1)|dta-tokwrap.perl>,
...

=cut

##======================================================================
## See Also
##======================================================================

=pod

=head1 SEE ALSO

L<DTA::TokWrap::Intro(3pm)|DTA::TokWrap::Intro>,
L<dta-tokwrap.perl(1)|dta-tokwrap.perl>,
...

=cut

##======================================================================
## Footer
##======================================================================

=pod

=head1 AUTHOR

Bryan Jurish E<lt>jurish@bbaw.deE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2009-2014 by Bryan Jurish

This package is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.14.2 or,
at your option, any later version of Perl 5 you may have available.

=cut


